
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.border.Border;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Nguyen Hai Dang
 */
public class CreateUserForm extends javax.swing.JDialog {

    /**
     * Creates new form CreateUserForm
     */
    public CreateUserForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        _adminDashBoard = (AdminDashBoard) parent;
        setAlertVisible(false);
        ((JTextField) dobDateChooser.getDateEditor().getUiComponent()).setEditable(false);
        roleComboBox.setModel(new DefaultComboBoxModel<>(initComboboxRoleData()));
        roleComboBox.setSelectedIndex(1);
        getNewUserID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        accountLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        userIDLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        accountTextField = new javax.swing.JTextField();
        passwordTextField = new javax.swing.JPasswordField();
        roleComboBox = new javax.swing.JComboBox<>();
        titleLabel = new javax.swing.JLabel();
        userIDTextField = new javax.swing.JTextField();
        closeHoverLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        dobLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        dobDateChooser = new com.toedter.calendar.JDateChooser();
        lastNameTextField = new javax.swing.JTextField();
        retypePasswordLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        phoneNumberTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        avatarLabel = new javax.swing.JLabel();
        avatarButton = new javax.swing.JButton();
        signupButton = new Button();
        accountAlert = new javax.swing.JLabel();
        passwordAlert = new javax.swing.JLabel();
        retypePasswordAlert = new javax.swing.JLabel();
        phoneNumberAlert = new javax.swing.JLabel();
        emailAlert = new javax.swing.JLabel();
        retypePasswordTextField = new javax.swing.JPasswordField();
        dobAlert = new javax.swing.JLabel();
        firstNameAlert = new javax.swing.JLabel();
        lastNameAlert = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setForeground(new java.awt.Color(255, 204, 204));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 51, 255)));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        accountLabel.setText("Tài khoản");
        jPanel1.add(accountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 91, -1, -1));

        passwordLabel.setText("Mật khẩu");
        jPanel1.add(passwordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 141, -1, -1));

        userIDLabel.setText("Mã người dùng");
        jPanel1.add(userIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 253, -1, -1));

        roleLabel.setText("Vai trò");
        jPanel1.add(roleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 517, -1, -1));
        jPanel1.add(accountTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 88, 182, -1));
        jPanel1.add(passwordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 138, 182, -1));

        jPanel1.add(roleComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 514, 150, -1));

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(204, 0, 204));
        titleLabel.setText("TẠO NGƯỜI DÙNG");
        jPanel1.add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(212, 26, -1, -1));

        userIDTextField.setEditable(false);
        userIDTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(userIDTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(286, 250, 100, -1));

        closeHoverLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        closeHoverLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/close1.png"))); // NOI18N
        closeHoverLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeHoverLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeHoverLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeHoverLabelMouseExited(evt);
            }
        });
        jPanel1.add(closeHoverLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 32, 32));

        lastNameLabel.setText("Họ");
        jPanel1.add(lastNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 303, -1, -1));

        firstNameLabel.setText("Tên");
        jPanel1.add(firstNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 303, -1, -1));

        dobLabel.setText("Ngày sinh");
        jPanel1.add(dobLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 361, -1, -1));

        emailLabel.setText("Email");
        jPanel1.add(emailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 437, -1, -1));

        phoneNumberLabel.setText("Số điện thoại");
        jPanel1.add(phoneNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 437, -1, -1));

        dobDateChooser.setDateFormatString("dd-MM-yyyy");
        jPanel1.add(dobDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 360, 150, -1));
        jPanel1.add(lastNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 150, -1));

        retypePasswordLabel.setText("Nhập lại mật khẩu");
        jPanel1.add(retypePasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 191, -1, -1));
        jPanel1.add(firstNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 300, 150, -1));
        jPanel1.add(phoneNumberTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 430, 150, -1));
        jPanel1.add(emailTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 434, 150, -1));

        avatarLabel.setText("Chân dung");
        jPanel1.add(avatarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 365, -1, -1));

        avatarButton.setText("Chọn ảnh...");
        avatarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avatarButtonActionPerformed(evt);
            }
        });
        jPanel1.add(avatarButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(383, 361, 150, -1));

        signupButton.setBackground(new java.awt.Color(0, 0, 255));
        signupButton.setForeground(new java.awt.Color(255, 255, 255));
        signupButton.setText("Đăng ký");
        signupButton.setBorderPainted(false);
        signupButton.setEnteredColor(new java.awt.Color(204, 204, 255));
        signupButton.setFocusPainted(true);
        signupButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        signupButton.setGradientBackgroundColor(new java.awt.Color(28, 181, 244));
        signupButton.setLineColor(null);
        signupButton.setRounded(true);
        signupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupButtonActionPerformed(evt);
            }
        });
        jPanel1.add(signupButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 590, 407, 38));

        accountAlert.setForeground(new java.awt.Color(255, 0, 0));
        accountAlert.setText("Tài khoản phải chứa từ 5-16 kí tự");
        jPanel1.add(accountAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 91, -1, -1));

        passwordAlert.setForeground(new java.awt.Color(255, 0, 0));
        passwordAlert.setText("Mật khẩu phải chứa từ 5-22 kí tự");
        jPanel1.add(passwordAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 141, -1, -1));

        retypePasswordAlert.setForeground(new java.awt.Color(255, 0, 0));
        retypePasswordAlert.setText("Mật khẩu không khớp");
        jPanel1.add(retypePasswordAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(356, 191, -1, -1));

        phoneNumberAlert.setForeground(new java.awt.Color(255, 0, 0));
        phoneNumberAlert.setText("Số điện thoại không đúng");
        jPanel1.add(phoneNumberAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 470, -1, -1));

        emailAlert.setForeground(new java.awt.Color(255, 0, 0));
        emailAlert.setText("Email không đúng");
        jPanel1.add(emailAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, -1, -1));
        jPanel1.add(retypePasswordTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 188, 182, -1));

        dobAlert.setForeground(new java.awt.Color(255, 0, 0));
        dobAlert.setText("Vui lòng chọn ngày sinh");
        jPanel1.add(dobAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 400, -1, -1));

        firstNameAlert.setForeground(new java.awt.Color(255, 0, 0));
        firstNameAlert.setText("Tên không được để trống");
        jPanel1.add(firstNameAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 330, -1, -1));

        lastNameAlert.setForeground(new java.awt.Color(255, 0, 0));
        lastNameAlert.setText("Họ không được để trống");
        jPanel1.add(lastNameAlert, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 330, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 640));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Connection getConnector() {
        if (_connector == null) {
            _connector = ConnectMysql.getConnectDB();
        }
        return _connector;
    }

    private void getNewUserID() {
        String sql = "select count(id) as countID from users";
        int id = 1;
        try {
            ResultSet rs = _connector.createStatement().executeQuery(sql);
            if (rs.next()) {
                id = rs.getInt("countID") + 1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(ImportForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        userIDTextField.setText(id + "");
    }

    private String[] initComboboxRoleData() {
        List<Role> roles = new ArrayList<>();
        try {
            ResultSet rs = getConnector().createStatement().executeQuery(getRoles());
            while (rs.next()) {
                roles.add(new Role(rs.getInt("id"), rs.getString("role")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(CreateUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        return roles.stream().map(role -> {
            return role.getRole();
        }).collect(Collectors.toList()).stream().toArray(String[]::new);
    }

    private void saveImage() {
        if (_profilePictureFile == null) {
            return;
        }

        String imageFolderPath = new File("").getAbsolutePath().concat("/src/profile/");
        File dest = new File(imageFolderPath, _profilePictureFile.getName());
        ArrayList<String> fileNameList = new AddImage().getFileNameList(new File(imageFolderPath));
        try {
            if (!(_profilePictureFile.getParent() + "/").equals(imageFolderPath)) {
                if (fileNameList.contains(_profilePictureFile.getName())) {
                    dest = new File(imageFolderPath, _profilePictureFile.getName() + "(copy)");
                }
                AddImage.copyFileUsingStream(_profilePictureFile, dest);
            }
        } catch (IOException ex) {
            Logger.getLogger(AddEquipmentDetailsForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String standardlizeName(String name) {
        name = name.trim();
        name = name.replaceAll("\\s+", " ");

        String[] temp = name.split(" ");
        name = "";

        for (int i = 0; i < temp.length; i++) {
            name += String.valueOf(temp[i].charAt(0)).toUpperCase() + temp[i].substring(1);
            if (i < temp.length - 1) {
                name += " ";
            }
        }

        return name;
    }

    private void setAlertVisible(boolean visible) {
        accountAlert.setVisible(visible);
        passwordAlert.setVisible(visible);
        retypePasswordAlert.setVisible(visible);
        firstNameAlert.setVisible(visible);
        lastNameAlert.setVisible(visible);
        phoneNumberAlert.setVisible(visible);
        emailAlert.setVisible(visible);
        dobAlert.setVisible(visible);
    }

    private void saveToDB() {
        String queryString = createLoginInfo(accountTextField.getText(), passwordTextField.getText(),
                Integer.valueOf(userIDTextField.getText()), roleComboBox.getSelectedIndex() + 1);

        Timestamp currentTime = new java.sql.Timestamp(new java.util.Date().getTime());
        java.sql.Date date = java.sql.Date.valueOf(new SimpleDateFormat("yyyy-MM-dd").format(dobDateChooser.getDate()));
        String picture = _profilePictureFile == null ? null : "/src/profile/" + avatarButton.getText();

        User user = new User(Integer.valueOf(userIDTextField.getText()),
                standardlizeName(firstNameTextField.getText()),
                standardlizeName(lastNameTextField.getText()),
                date,
                emailTextField.getText(),
                phoneNumberTextField.getText(),
                picture, currentTime, currentTime);

        try {
            new UserController().addNewUser(user);
            Statement statement = getConnector().createStatement();
            statement.executeUpdate(queryString);

            saveImage();
            new AlertFrame("Đăng ký thành công").setVisible(true);
            dispose();
            _adminDashBoard.loadDatabase();
        } catch (SQLException ex) {
            Logger.getLogger(CreateUserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean canExcuteUpdateDB() {
        setAlertVisible(false);
        boolean check = true;
        if (!checkAccount()) {
            check = false;
        }

        if (!checkPassword()) {
            check = false;
        }

        if (!checkRetypePass()) {
            check = false;
        }

        if (!checkLastName()) {
            check = false;
        }

        if (!checkFirstName()) {
            check = false;
        }

        if (!checkPhoneNumber()) {
            check = false;
        }

        if (!checkEmail()) {
            check = false;
        }

        if (!checkDOB()) {
            check = false;
        }

        return check;
    }

    private boolean checkAccount() {
        String pattern = "^([a-zA-Z]+[\\w]{4,15})$";

        if (!accountTextField.getText().matches(pattern)) {
            accountAlert.setText("Tài khoản phải chứa từ 5-16 kí tự");
            if (!accountTextField.getText().isEmpty()) {
                if (Character.isDigit(accountTextField.getText().charAt(0))) {
                    accountAlert.setText("Tài khoản phải bắt đầu bằng chữ cái");
                }
            }
            accountAlert.setVisible(true);
            return false;
        }
        else {
            String sql = "select * from login_info where userName = '" + accountTextField.getText() + "'";
            try {
                Statement statement = getConnector().createStatement();
                ResultSet result = statement.executeQuery(sql);
                if (result.next()) {
                    accountAlert.setText("Tên tài khoản đã tồn tại");
                    accountAlert.setVisible(true);
                    return false;
                }
            } catch (SQLException ex) {
                Logger.getLogger(CreateUserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return true;
    }

    private boolean checkPassword() {
        String pattern = "\\w{5,22}$";
        if (!passwordTextField.getText().matches(pattern)) {
            passwordAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean checkRetypePass() {
        String password = passwordTextField.getText();
        if (!retypePasswordTextField.getText().equals(password)) {
            retypePasswordAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean checkPhoneNumber() {
        String pattern = "\\d{10}$";
        if (!phoneNumberTextField.getText().matches(pattern)) {
            phoneNumberAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean checkEmail() {
        String pattern = "^[a-zA-Z][\\w-]+@([\\w]+\\.[\\w]+|[\\w]+\\.[\\w]{2,}\\.[\\w]{2,})$";
        if (!emailTextField.getText().matches(pattern)) {
            emailAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean checkDOB() {
        if (((JTextField) dobDateChooser.getDateEditor().getUiComponent()).getText().isEmpty()) {
            dobAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean checkFirstName() {
        if (firstNameTextField.getText().isEmpty()) {
            firstNameAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private boolean checkLastName() {
        if (lastNameTextField.getText().isEmpty()) {
            lastNameAlert.setVisible(true);
            return false;
        }
        return true;
    }

    private String getRoles() {
        return "SELECT * FROM role";
    }

    private String createLoginInfo(String username, String password, int userId, int role) {
        return "INSERT INTO `login_info`(userName, password, userId, role_id) VALUES ('" + username + "','" + password + "','" + userId + "','" + role + "')";
    }

    private void closeHoverLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeHoverLabelMouseEntered
        closeHoverLabel.setSize(36, 36);
        closeHoverLabel.setIcon(ImageGenerator.ResizeImage(new ImageGenerator().getImageFolderPath() + "/src/icon/close2.png", closeHoverLabel));
    }//GEN-LAST:event_closeHoverLabelMouseEntered

    private void closeHoverLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeHoverLabelMouseExited
        closeHoverLabel.setSize(24, 24);
        closeHoverLabel.setIcon(ImageGenerator.ResizeImage(new ImageGenerator().getImageFolderPath() + "/src/icon/close1.png", closeHoverLabel));
    }//GEN-LAST:event_closeHoverLabelMouseExited

    private void closeHoverLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeHoverLabelMouseClicked
        this.dispose();
    }//GEN-LAST:event_closeHoverLabelMouseClicked

    private void signupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupButtonActionPerformed
        if (canExcuteUpdateDB()) {
            saveToDB();
        }
    }//GEN-LAST:event_signupButtonActionPerformed

    private void avatarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avatarButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new ImageFilter());
        fileChooser.setAcceptAllFileFilterUsed(false);

        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            _profilePictureFile = fileChooser.getSelectedFile();
            avatarButton.setText(_profilePictureFile.getName());
        }
    }//GEN-LAST:event_avatarButtonActionPerformed

    private AdminDashBoard _adminDashBoard = null;
    private File _profilePictureFile = null;
    private Connection _connector = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountAlert;
    private javax.swing.JLabel accountLabel;
    private javax.swing.JTextField accountTextField;
    private javax.swing.JButton avatarButton;
    private javax.swing.JLabel avatarLabel;
    private javax.swing.JLabel closeHoverLabel;
    private javax.swing.JLabel dobAlert;
    private com.toedter.calendar.JDateChooser dobDateChooser;
    private javax.swing.JLabel dobLabel;
    private javax.swing.JLabel emailAlert;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel firstNameAlert;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lastNameAlert;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JLabel passwordAlert;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel phoneNumberAlert;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JLabel retypePasswordAlert;
    private javax.swing.JLabel retypePasswordLabel;
    private javax.swing.JPasswordField retypePasswordTextField;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JLabel roleLabel;
    private Button signupButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel userIDLabel;
    private javax.swing.JTextField userIDTextField;
    // End of variables declaration//GEN-END:variables
}
